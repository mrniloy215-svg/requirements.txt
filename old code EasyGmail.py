# ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø: pytelegrambotapi, openpyxl
# pip install pyTelegramBotAPI openpyxl

import telebot
from telebot import types
import json
import os
from datetime import datetime
from openpyxl import Workbook
import tempfile

# ================== CONFIG ==================
TOKEN = '8390865878:AAEIH_oVbfYTRpzZCvH5EZMZqR6PTyeiqSU' 
ADMIN_CHAT_ID = 6807305596
BKASH_NUMBER = '01902557331'
NAGAD_NUMBER = '01795994245'
DATA_FILE = 'data.json'
COST_PER_GMAIL = 12
# ============================================

bot = telebot.TeleBot(TOKEN)

# ‡¶≤‡ßã‡¶° / ‡¶∏‡ßá‡¶≠ ‡¶°‡¶æ‡¶ü‡¶æ
def load_data():
    if not os.path.exists(DATA_FILE):
        data = {
            "user_balance": {},
            "gmail_store": [],
            "orders": []
        }
        save_data(data)
        return data
    with open(DATA_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()

# ‡¶õ‡ßã‡¶ü ‡¶π‡ßá‡¶≤‡¶™‡¶æ‡¶∞
def main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('‡¶∞‡¶ø‡¶ö‡¶æ‡¶∞‡ßç‡¶ú', 'Order üìë')
    markup.row('‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏', '‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø')
    markup.row('Language üåê')
    return markup

# ========== /start ==========
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    welcome = """Bot Onlineüü¢
üëã ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ‡•§ üåπ‚ô•Ô∏è 
‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®, 
‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡¶Æ‡¶§ ‡¶Ø‡¶§‡¶ñ‡ßÅ‡¶∂‡¶ø Gmail ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®, 
‡¶â‡¶™‡¶≠‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡ßá‡¶∞‡¶æ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏‡•§ 
‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶ üíù"""
    bot.send_message(chat_id, welcome, reply_markup=main_menu(chat_id))

# ========== ADD GMAIL ==========
@bot.message_handler(commands=['addgmail'])
def addgmail_cmd(message):
    if message.chat.id != ADMIN_CHAT_ID:
        bot.reply_to(message, "‚ùå ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§")
        return
    payload = message.text[len('/addgmail'):].strip()
    if payload:
        process_addgmail_text(message.chat.id, payload)
    else:
        msg = bot.reply_to(message, "üì• Gmail+Password ‡¶≤‡¶æ‡¶á‡¶®‡¶¨‡¶æ‡¶á‡¶≤‡ßá ‡¶™‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßã (email|password)\n‡¶™‡ßá‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶™‡¶∞ Send ‡¶ï‡¶∞‡ßã‡•§")
        bot.register_next_step_handler(msg, admin_paste_gmails)

def admin_paste_gmails(message):
    if message.chat.id != ADMIN_CHAT_ID:
        return
    text = message.text or ""
    process_addgmail_text(message.chat.id, text)

def process_addgmail_text(chat_id, text):
    lines = [ln.strip() for ln in text.splitlines() if ln.strip()]
    added = 0
    bad_lines = []
    for ln in lines:
        if '|' in ln:
            parts = ln.split('|', 1)
        else:
            parts = ln.split()
        if len(parts) >= 2:
            email = parts[0].strip()
            pwd = parts[1].strip()
            data['gmail_store'].append(f"{email}|{pwd}")
            added += 1
        else:
            bad_lines.append(ln)
    save_data(data)
    resp = f"‚úÖ {added} ‡¶ü‡¶ø Gmail ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§"
    if bad_lines:
        resp += "\n‚ùó ‡¶®‡¶ø‡¶Æ‡ßç‡¶® ‡¶≤‡¶æ‡¶á‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶™‡ßú‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø:\n" + "\n".join(bad_lines)
    bot.send_message(chat_id, resp)

# ========== ORDER ==========
@bot.message_handler(func=lambda m: m.text in ['Order üìë', 'Order'])
def order_start(message):
    chat_id = message.chat.id
    stock = len(data['gmail_store'])
    if stock == 0:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('Notify', 'Main Menu')
        bot.send_message(chat_id, "‚ö†Ô∏è ‡¶∏‡ßç‡¶ü‡¶ï‡ßá ‡¶ï‡ßã‡¶®‡ßã Gmail ‡¶®‡ßá‡¶á‡•§ ‡¶™‡¶∞‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", reply_markup=markup)
        return
    max_buy = min(10, stock)
    markup = types.ReplyKeyboardMarkup(row_width=5, resize_keyboard=True, one_time_keyboard=True)
    markup.add(*[types.KeyboardButton(str(i)) for i in range(1, max_buy+1)])
    bot.send_message(chat_id, f"üéØ ‡¶ï‡¶§‡¶ü‡¶ø Gmail ‡¶®‡¶ø‡¶§‡ßá ‡¶ö‡¶æ‡¶®? (‡ßß - {max_buy})", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(chat_id, order_process)

def order_process(message):
    chat_id = message.chat.id
    try:
        count = int(message.text)
    except:
        bot.send_message(chat_id, "‚ùå ‡¶∏‡¶†‡¶ø‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§", reply_markup=main_menu(chat_id))
        return
    stock = len(data['gmail_store'])
    if count < 1 or count > min(10, stock):
        bot.send_message(chat_id, f"‚ùå ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡ßß - {min(10,stock)} ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶¶‡¶ø‡¶®‡•§", reply_markup=main_menu(chat_id))
        return
    cost = count * COST_PER_GMAIL
    user_bal = data['user_balance'].get(str(chat_id), 0)
    if user_bal < cost:
        bot.send_message(chat_id, f"‚ö†Ô∏è ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ {user_bal} ‡¶ü‡¶æ‡¶ï‡¶æ, ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶® {cost} ‡¶ü‡¶æ‡¶ï‡¶æ‡•§ ‡¶Ü‡¶ó‡ßá ‡¶∞‡¶ø‡¶ö‡¶æ‡¶∞‡ßç‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", reply_markup=main_menu(chat_id))
        return

    data['user_balance'][str(chat_id)] = user_bal - cost
    gmails_to_send = data['gmail_store'][:count]
    data['gmail_store'] = data['gmail_store'][count:]

    order = {
        "uid": chat_id,
        "count": count,
        "amount": cost,
        "timestamp": datetime.utcnow().isoformat() + "Z",
        "gmails": gmails_to_send
    }
    data['orders'].append(order)
    save_data(data)

    try:
        file_path = create_xlsx_for_order(chat_id, gmails_to_send)
        with open(file_path, 'rb') as f:
            bot.send_document(chat_id, f, caption=f"‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ {count} ‡¶ü‡¶ø Gmail (Order) ‚Äî ‡¶Æ‡ßã‡¶ü {cost} ‡¶ü‡¶æ‡¶ï‡¶æ‡•§", reply_markup=main_menu(chat_id))
        os.remove(file_path)
    except Exception as e:
        data['user_balance'][str(chat_id)] += cost
        save_data(data)
        bot.send_message(chat_id, "‚ùå ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø/‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", reply_markup=main_menu(chat_id))
        bot.send_message(ADMIN_CHAT_ID, f"Error creating/sending xlsx for UID {chat_id}: {e}")
        return

    bot.send_message(ADMIN_CHAT_ID, f"üõí New Order:\nUID: {chat_id}\nCount: {count}\nAmount: {cost}\nTime(UTC): {order['timestamp']}")

def create_xlsx_for_order(uid, gmails):
    wb = Workbook()
    ws = wb.active
    ws.title = "Gmails"
    ws.append(["Gmail", "Password"])
    for entry in gmails:
        if '|' in entry:
            email, pwd = entry.split('|', 1)
        else:
            parts = entry.split()
            email = parts[0]
            pwd = parts[1] if len(parts) > 1 else ""
        ws.append([email, pwd])
    tmp = os.path.join(tempfile.gettempdir(), f"Order-{uid}-{datetime.utcnow().strftime('%Y%m%d%H%M%S')}.xlsx")
    wb.save(tmp)
    return tmp

# ========== Recharge ==========
recharge_sessions = {}

@bot.message_handler(func=lambda m: m.text in ['‡¶∞‡¶ø‡¶ö‡¶æ‡¶∞‡ßç‡¶ú', 'Recharge'])
def recharge_start(message):
    chat_id = message.chat.id
    text = f"üí∏ ‡¶∞‡¶ø‡¶ö‡¶æ‡¶∞‡ßç‡¶ú ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®:\n‡¶¨‡¶ø‡¶ï‡¶æ‡¶∂: {BKASH_NUMBER}\n‡¶®‡¶ó‡¶¶: {NAGAD_NUMBER}\n\nTransaction ID ‡¶™‡¶æ‡¶†‡¶æ‡¶®:"
    bot.send_message(chat_id, text, reply_markup=types.ReplyKeyboardRemove())
    recharge_sessions[chat_id] = {'step': 1, 'data': {}}

@bot.message_handler(func=lambda m: m.chat.id in recharge_sessions)
def recharge_process(message):
    chat_id = message.chat.id
    session = recharge_sessions.get(chat_id)
    if not session:
        return
    step = session['step']
    text = (message.text or "").strip()

    if step == 1:
        session['data']['transaction_id'] = text
        session['step'] = 2
        bot.send_message(chat_id, "üí∞ ‡¶è‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶¶‡¶ø‡¶®:")

    elif step == 2:
        if not text.isdigit():
            bot.send_message(chat_id, "‚ùå ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡¶ø‡¶®‡•§")
            return
        session['data']['amount'] = int(text)
        session['step'] = 3
        bot.send_message(chat_id, "üÜî ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶á‡¶â‡¶Ü‡¶á‡¶°‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶® (@userinfobot ‡¶•‡ßá‡¶ï‡ßá):")

    elif step == 3:
        if not text.isdigit():
            bot.send_message(chat_id, "‚ùå ‡¶≠‡ßÅ‡¶≤ UID, ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡¶ø‡¶®:")
            return
        session['data']['telegram_uid'] = int(text)
        session['step'] = 4
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("Done ‚úÖ")
        bot.send_message(chat_id, "‚úÖ ‡¶∏‡¶¨ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßá‡ßü‡ßá‡¶õ‡¶ø‡•§ Done ‚úÖ ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", reply_markup=markup)

    elif step == 4:
        if text.lower() in ['done ‚úÖ', 'done']:
            d = session['data']
            username = message.from_user.username or "NotSet"
            bot.send_message(
                ADMIN_CHAT_ID,
                f"üí≥ ‡¶®‡¶§‡ßÅ‡¶® ‡¶∞‡¶ø‡¶ö‡¶æ‡¶∞‡ßç‡¶ú ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß:\n"
                f"üë§ Username: @{username}\n"
                f"üÜî Telegram ID: {d['telegram_uid']}\n"
                f"üîñ Transaction ID: {d['transaction_id']}\n"
                f"üí∞ Amount: {d['amount']} ‡¶ü‡¶æ‡¶ï‡¶æ\n\n"
                f"/approve {d['telegram_uid']} {d['amount']}\n"
                f"/cancel {d['telegram_uid']}"
            )
            bot.send_message(chat_id, "‚è≥ ‡¶§‡¶•‡ßç‡¶Ø ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", reply_markup=main_menu(chat_id))
            recharge_sessions.pop(chat_id, None)
        else:
            bot.send_message(chat_id, "‚ùå Done ‚úÖ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

# ========== Approve/Cancel ==========
@bot.message_handler(commands=['approve'])
def approve(message):
    if message.chat.id != ADMIN_CHAT_ID:
        return
    try:
        _, uid_s, amount_s = message.text.split()
        uid = int(uid_s)
        amount = int(amount_s)
        data['user_balance'][str(uid)] = data['user_balance'].get(str(uid), 0) + amount
        save_data(data)
        bot.send_message(uid, f"‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ {amount} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶∞‡¶ø‡¶ö‡¶æ‡¶∞‡ßç‡¶ú ‡¶è‡¶™‡ßç‡¶∞‡ßÅ‡¶≠ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
        bot.send_message(ADMIN_CHAT_ID, f"‚úÖ ‡¶∞‡¶ø‡¶ö‡¶æ‡¶∞‡ßç‡¶ú ‡¶è‡¶™‡ßç‡¶∞‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá (UID: {uid})")
    except:
        bot.send_message(message.chat.id, "‚ùå ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶≠‡ßÅ‡¶≤! ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:\n/approve 123456789 50")

@bot.message_handler(commands=['cancel'])
def cancel(message):
    if message.chat.id != ADMIN_CHAT_ID:
        return
    try:
        _, uid_s = message.text.split()
        uid = int(uid_s)
        bot.send_message(uid, "‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶ö‡¶æ‡¶∞‡ßç‡¶ú ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
        bot.send_message(ADMIN_CHAT_ID, f"‚ùå UID {uid}-‡¶è‡¶∞ ‡¶∞‡¶ø‡¶ö‡¶æ‡¶∞‡ßç‡¶ú ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
    except:
        bot.send_message(message.chat.id, "‚ùå ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶≠‡ßÅ‡¶≤! ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:\n/cancel 123456789")

# ========== Balance & Help ==========
@bot.message_handler(func=lambda m: m.text in ['‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏','Balance'])
def balance(message):
    chat_id = message.chat.id
    bal = data['user_balance'].get(str(chat_id), 0)
    bot.send_message(chat_id, f"üí∞ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: {bal} ‡¶ü‡¶æ‡¶ï‡¶æ‡•§", reply_markup=main_menu(chat_id))

@bot.message_handler(func=lambda m: m.text in ['‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø','Help'])
def help_msg(message):
    bot.send_message(
        message.chat.id,
        "üõ† ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°:\n"
        "‡¶∞‡¶ø‡¶ö‡¶æ‡¶∞‡ßç‡¶ú - ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶∞‡¶ø‡¶ö‡¶æ‡¶∞‡ßç‡¶ú\n"
        "Order üìë - Gmail ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞\n"
        "‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ - ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®\n"
        "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó: @mrniloy1122",
        reply_markup=main_menu(message.chat.id)
    )

# ========== Notify ==========
@bot.message_handler(func=lambda m: m.text == 'Notify')
def notify_request(message):
    chat_id = message.chat.id
    bot.send_message(ADMIN_CHAT_ID, f"üîî User {chat_id} wants to be notified.")
    bot.send_message(chat_id, "‚úÖ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶∏‡ßç‡¶ü‡¶ï ‡¶è‡¶≤‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá‡•§", reply_markup=main_menu(chat_id))

# ========== /listgmail & /removegmail ==========
@bot.message_handler(commands=['listgmail'])
def listgmail(message):
    if message.chat.id != ADMIN_CHAT_ID:
        bot.reply_to(message, "‚ùå ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§")
        return
    lines = data['gmail_store']
    if not lines:
        bot.reply_to(message, "‡¶∏‡ßç‡¶ü‡¶ï‡ßá ‡¶ï‡ßã‡¶®‡ßã Gmail ‡¶®‡ßá‡¶á‡•§")
        return
    preview = "\n".join(lines[:50])
    bot.reply_to(message, f"‡¶∏‡ßç‡¶ü‡¶ï‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ {min(len(lines),50)} ‡¶ü‡¶ø:\n{preview}")

@bot.message_handler(commands=['removegmail'])
def removegmail(message):
    if message.chat.id != ADMIN_CHAT_ID:
        bot.reply_to(message, "‚ùå ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§")
        return
    parts = message.text.split()
    if len(parts) < 2:
        bot.reply_to(message, "‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /removegmail email@gmail.com")
        return
    target = parts[1].strip()
    before = len(data['gmail_store'])
    data['gmail_store'] = [e for e in data['gmail_store'] if not e.startswith(target + "|")]
    save_data(data)
    bot.reply_to(message, f"‚úÖ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {before - len(data['gmail_store'])} ‡¶ü‡¶ø ‡¶è‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡•§")

# ========== Run Bot ==========
if __name__ == '__main__':
    print("ü§ñ Bot is running...")
    bot.infinity_polling()